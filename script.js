/*!
 * Copyright (c) Christopher Keefer, 2017.
 * jquery-ajax-localstorage-cache: V2.0.0.
 * This file is generated by grunt - do not edit directly.
 * Alter source files as needed, then run `grunt` in project directory.
 * Compiled: 2017-09-18 
 */


! function(a, b) {
    "use strict";
    var c = function(a) { var b; return a.cacheKey ? "function" == typeof a.cacheKey ? a.cacheKey(a) : a.cacheKey : (b = a.url.replace(/jQuery.*/, ""), a.cache === !1 && (b = b.replace(/([?&])_=[^&]*/, "")), b + a.type + (a.data || "")) },
        d = function(a) { if (!a) return !1; if (a === !0) return b.localStorage; if ("object" == typeof a && "getItem" in a && "removeItem" in a && "setItem" in a) return a; throw new TypeError("localCache must either be a boolean value, or an object which implements the Storage interface.") },
        e = function(a, b) { a.removeItem(b), a.removeItem(b + "cachettl"), a.removeItem(b + "dataType") };
    a.ajaxPrefilter(function(a, b, f) {
        var g, h, i = d(a.localCache),
            j = a.cacheTTL || 5,
            k = a.cacheKey = c(a),
            l = a.isCacheValid,
            m = a.isResponseValid,
            n = a.thenResponse || null;
        i && (g = i.getItem(k + "cachettl"), l && "function" == typeof l && !l() && (e(i, k), g = 0), g && g < +new Date && (e(i, k), g = 0), h = i.getItem(k), h || f.then(n).then(function(b, c, d) {
            var f = b,
                g = a.dataType || d.getResponseHeader("Content-Type") || "text/plain";
            if (!m || "function" != typeof m || m(b, c, d)) {-1 !== g.toLowerCase().indexOf("json") && (f = JSON.stringify(b)); try { i.setItem(k, f), i.setItem(k + "cachettl", +new Date + 36e5 * j), i.setItem(k + "dataType", g) } catch (h) { e(i, k), console.log("Cache Error:" + h, k, f) } }
        }))
    }), a.ajaxTransport("+*", function(a) {
        if (a.localCache) {
            var b = a.cacheKey,
                c = d(a.localCache),
                e = a.dataType || c.getItem(b + "dataType") || "text",
                f = c ? c.getItem(b) : !1;
            if (f) return -1 !== e.toLowerCase().indexOf("json") && (f = JSON.parse(f)), {
                send: function(a, b) {
                    var c = {};
                    c[e] = f, b(200, "success", c, "")
                },
                abort: function() { console.log("Aborted ajax transport for json cache.") }
            }
        }
    })
}(jQuery, window);
//# sourceMappingURL=jalc.min.map

document.addEventListener('DOMContentLoaded', function() {
    // Key map
    var ENTER = 13;
    var ESCAPE = 27;
    var SPACE = 32;
    var UP = 38;
    var DOWN = 40;
    var TAB = 9;

    function closest(element, selector) {
        if (Element.prototype.closest) {
            return element.closest(selector);
        }
        do {
            if (Element.prototype.matches && element.matches(selector) ||
                Element.prototype.msMatchesSelector && element.msMatchesSelector(selector) ||
                Element.prototype.webkitMatchesSelector && element.webkitMatchesSelector(selector)) {
                return element;
            }
            element = element.parentElement || element.parentNode;
        } while (element !== null && element.nodeType === 1);
        return null;
    }

    // social share popups
    Array.prototype.forEach.call(document.querySelectorAll('.share a'), function(anchor) {
        anchor.addEventListener('click', function(e) {
            e.preventDefault();
            window.open(this.href, '', 'height = 500, width = 500');
        });
    });

    // In some cases we should preserve focus after page reload
    function saveFocus() {
        var activeElementId = document.activeElement.getAttribute("id");
        sessionStorage.setItem('returnFocusTo', '#' + activeElementId);
    }
    var returnFocusTo = sessionStorage.getItem('returnFocusTo');
    if (returnFocusTo) {
        sessionStorage.removeItem('returnFocusTo');
        var returnFocusToEl = document.querySelector(returnFocusTo);
        returnFocusToEl && returnFocusToEl.focus && returnFocusToEl.focus();
    }

    // show form controls when the textarea receives focus or backbutton is used and value exists
    var commentContainerTextarea = document.querySelector('.comment-container textarea'),
        commentContainerFormControls = document.querySelector('.comment-form-controls, .comment-ccs');

    if (commentContainerTextarea) {
        commentContainerTextarea.addEventListener('focus', function focusCommentContainerTextarea() {
            commentContainerFormControls.style.display = 'block';
            commentContainerTextarea.removeEventListener('focus', focusCommentContainerTextarea);
        });

        if (commentContainerTextarea.value !== '') {
            commentContainerFormControls.style.display = 'block';
        }
    }

    // Expand Request comment form when Add to conversation is clicked
    var showRequestCommentContainerTrigger = document.querySelector('.request-container .comment-container .comment-show-container'),
        requestCommentFields = document.querySelectorAll('.request-container .comment-container .comment-fields'),
        requestCommentSubmit = document.querySelector('.request-container .comment-container .request-submit-comment');

    if (showRequestCommentContainerTrigger) {
        showRequestCommentContainerTrigger.addEventListener('click', function() {
            showRequestCommentContainerTrigger.style.display = 'none';
            Array.prototype.forEach.call(requestCommentFields, function(e) { e.style.display = 'block'; });
            requestCommentSubmit.style.display = 'inline-block';

            if (commentContainerTextarea) {
                commentContainerTextarea.focus();
            }
        });
    }

    // Mark as solved button
    var requestMarkAsSolvedButton = document.querySelector('.request-container .mark-as-solved:not([data-disabled])'),
        requestMarkAsSolvedCheckbox = document.querySelector('.request-container .comment-container input[type=checkbox]'),
        requestCommentSubmitButton = document.querySelector('.request-container .comment-container input[type=submit]');

    if (requestMarkAsSolvedButton) {
        requestMarkAsSolvedButton.addEventListener('click', function() {
            requestMarkAsSolvedCheckbox.setAttribute('checked', true);
            requestCommentSubmitButton.disabled = true;
            this.setAttribute('data-disabled', true);
            // Element.closest is not supported in IE11
            closest(this, 'form').submit();
        });
    }

    // Change Mark as solved text according to whether comment is filled
    var requestCommentTextarea = document.querySelector('.request-container .comment-container textarea');

    var usesWysiwyg = requestCommentTextarea && requestCommentTextarea.dataset.helper === "wysiwyg";

    function isEmptyPlaintext(s) {
        return s.trim() === '';
    }

    function isEmptyHtml(xml) {
        var doc = new DOMParser().parseFromString(`<_>${xml}</_>`, "text/xml");
        var img = doc.querySelector("img");
        return img === null && isEmptyPlaintext(doc.children[0].textContent);
    }

    var isEmpty = usesWysiwyg ? isEmptyHtml : isEmptyPlaintext;

    if (requestCommentTextarea) {
        requestCommentTextarea.addEventListener('input', function() {
            if (isEmpty(requestCommentTextarea.value)) {
                if (requestMarkAsSolvedButton) {
                    requestMarkAsSolvedButton.innerText = requestMarkAsSolvedButton.getAttribute('data-solve-translation');
                }
                requestCommentSubmitButton.disabled = true;
            } else {
                if (requestMarkAsSolvedButton) {
                    requestMarkAsSolvedButton.innerText = requestMarkAsSolvedButton.getAttribute('data-solve-and-submit-translation');
                }
                requestCommentSubmitButton.disabled = false;
            }
        });
    }

    // Disable submit button if textarea is empty
    if (requestCommentTextarea && isEmpty(requestCommentTextarea.value)) {
        requestCommentSubmitButton.disabled = true;
    }

    // Submit requests filter form on status or organization change in the request list page
    Array.prototype.forEach.call(document.querySelectorAll('#request-status-select, #request-organization-select'), function(el) {
        el.addEventListener('change', function(e) {
            e.stopPropagation();
            saveFocus();
            closest(this, 'form').submit();
        });
    });

    // Submit requests filter form on search in the request list page
    var quickSearch = document.querySelector('#quick-search');
    quickSearch && quickSearch.addEventListener('keyup', function(e) {
        if (e.keyCode === ENTER) {
            e.stopPropagation();
            saveFocus();
            closest(this, 'form').submit();
        }
    });

    function toggleNavigation(toggle, menu) {
        var isExpanded = menu.getAttribute('aria-expanded') === 'true';
        menu.setAttribute('aria-expanded', !isExpanded);
        toggle.setAttribute('aria-expanded', !isExpanded);
    }

    function closeNavigation(toggle, menu) {
        menu.setAttribute('aria-expanded', false);
        toggle.setAttribute('aria-expanded', false);
        toggle.focus();
    }

    var menuButton = document.querySelector('.header .menu-button-mobile');
    var menuList = document.querySelector('#user-nav-mobile');

    menuButton.addEventListener('click', function(e) {
        e.stopPropagation();
        toggleNavigation(this, menuList);
    });


    menuList.addEventListener('keyup', function(e) {
        if (e.keyCode === ESCAPE) {
            e.stopPropagation();
            closeNavigation(menuButton, this);
        }
    });

    // Toggles expanded aria to collapsible elements
    var collapsible = document.querySelectorAll('.collapsible-nav, .collapsible-sidebar');

    Array.prototype.forEach.call(collapsible, function(el) {
        var toggle = el.querySelector('.collapsible-nav-toggle, .collapsible-sidebar-toggle');

        el.addEventListener('click', function(e) {
            toggleNavigation(toggle, this);
        });

        el.addEventListener('keyup', function(e) {
            if (e.keyCode === ESCAPE) {
                closeNavigation(toggle, this);
            }
        });
    });

    // Submit organization form in the request page
    var requestOrganisationSelect = document.querySelector('#request-organization select');

    if (requestOrganisationSelect) {
        requestOrganisationSelect.addEventListener('change', function() {
            closest(this, 'form').submit();
        });
    }

    // If multibrand search has more than 5 help centers or categories collapse the list
    var multibrandFilterLists = document.querySelectorAll(".multibrand-filter-list");
    Array.prototype.forEach.call(multibrandFilterLists, function(filter) {
        if (filter.children.length > 6) {
            // Display the show more button
            var trigger = filter.querySelector(".see-all-filters");
            trigger.setAttribute("aria-hidden", false);

            // Add event handler for click
            trigger.addEventListener("click", function(e) {
                e.stopPropagation();
                trigger.parentNode.removeChild(trigger);
                filter.classList.remove("multibrand-filter-list--collapsed")
            })
        }
    });

    // If there are any error notifications below an input field, focus that field
    var notificationElm = document.querySelector(".notification-error");
    if (
        notificationElm &&
        notificationElm.previousElementSibling &&
        typeof notificationElm.previousElementSibling.focus === "function"
    ) {
        notificationElm.previousElementSibling.focus();
    }

    // Dropdowns

    function Dropdown(toggle, menu) {
        this.toggle = toggle;
        this.menu = menu;

        this.menuPlacement = {
            top: menu.classList.contains("dropdown-menu-top"),
            end: menu.classList.contains("dropdown-menu-end")
        };

        this.toggle.addEventListener("click", this.clickHandler.bind(this));
        this.toggle.addEventListener("keydown", this.toggleKeyHandler.bind(this));
        this.menu.addEventListener("keydown", this.menuKeyHandler.bind(this));
    }

    Dropdown.prototype = {

        get isExpanded() {
            return this.menu.getAttribute("aria-expanded") === "true";
        },

        get menuItems() {
            return Array.prototype.slice.call(this.menu.querySelectorAll("[role='menuitem']"));
        },

        dismiss: function() {
            if (!this.isExpanded) return;

            this.menu.setAttribute("aria-expanded", false);
            this.menu.classList.remove("dropdown-menu-end", "dropdown-menu-top");
        },

        open: function() {
            if (this.isExpanded) return;

            this.menu.setAttribute("aria-expanded", true);
            this.handleOverflow();
        },

        handleOverflow: function() {
            var rect = this.menu.getBoundingClientRect();

            var overflow = {
                right: rect.left < 0 || rect.left + rect.width > window.innerWidth,
                bottom: rect.top < 0 || rect.top + rect.height > window.innerHeight
            };

            if (overflow.right || this.menuPlacement.end) {
                this.menu.classList.add("dropdown-menu-end");
            }

            if (overflow.bottom || this.menuPlacement.top) {
                this.menu.classList.add("dropdown-menu-top");
            }

            if (this.menu.getBoundingClientRect().top < 0) {
                this.menu.classList.remove("dropdown-menu-top")
            }
        },

        focusNextMenuItem: function(currentItem) {
            if (!this.menuItems.length) return;

            var currentIndex = this.menuItems.indexOf(currentItem);
            var nextIndex = currentIndex === this.menuItems.length - 1 || currentIndex < 0 ? 0 : currentIndex + 1;

            this.menuItems[nextIndex].focus();
        },

        focusPreviousMenuItem: function(currentItem) {
            if (!this.menuItems.length) return;

            var currentIndex = this.menuItems.indexOf(currentItem);
            var previousIndex = currentIndex <= 0 ? this.menuItems.length - 1 : currentIndex - 1;

            this.menuItems[previousIndex].focus();
        },

        clickHandler: function() {
            if (this.isExpanded) {
                this.dismiss();
            } else {
                this.open();
            }
        },

        toggleKeyHandler: function(e) {
            switch (e.keyCode) {
                case ENTER:
                case SPACE:
                case DOWN:
                    e.preventDefault();
                    this.open();
                    this.focusNextMenuItem();
                    break;
                case UP:
                    e.preventDefault();
                    this.open();
                    this.focusPreviousMenuItem();
                    break;
                case ESCAPE:
                    this.dismiss();
                    this.toggle.focus();
                    break;
            }
        },

        menuKeyHandler: function(e) {
            var firstItem = this.menuItems[0];
            var lastItem = this.menuItems[this.menuItems.length - 1];
            var currentElement = e.target;

            switch (e.keyCode) {
                case ESCAPE:
                    this.dismiss();
                    this.toggle.focus();
                    break;
                case DOWN:
                    e.preventDefault();
                    this.focusNextMenuItem(currentElement);
                    break;
                case UP:
                    e.preventDefault();
                    this.focusPreviousMenuItem(currentElement);
                    break;
                case TAB:
                    if (e.shiftKey) {
                        if (currentElement === firstItem) {
                            this.dismiss();
                        } else {
                            e.preventDefault();
                            this.focusPreviousMenuItem(currentElement);
                        }
                    } else if (currentElement === lastItem) {
                        this.dismiss();
                    } else {
                        e.preventDefault();
                        this.focusNextMenuItem(currentElement);
                    }
                    break;
                case ENTER:
                case SPACE:
                    e.preventDefault();
                    currentElement.click();
                    break;
            }
        }
    }

    var dropdowns = [];
    var dropdownToggles = Array.prototype.slice.call(document.querySelectorAll(".dropdown-toggle"));

    dropdownToggles.forEach(function(toggle) {
        var menu = toggle.nextElementSibling;
        if (menu && menu.classList.contains("dropdown-menu")) {
            dropdowns.push(new Dropdown(toggle, menu));
        }
    });

    document.addEventListener("click", function(evt) {
        dropdowns.forEach(function(dropdown) {
            if (!dropdown.toggle.contains(evt.target)) {
                dropdown.dismiss();
            }
        });
    });


});

(function($) {
    "use strict";


    function CoreThemeCore() {
        var self = this;
        self.init();
    };

    CoreThemeCore.prototype = {
        /**
         *  Initialize
         */
        init: function() {
            var self = this;

            // popup image
            self.getMenu();


        },
        /**
         *  Extensions: Load scripts
         */


        getMenu: function() {
            let lang = $('html').attr('lang');
            // $.ajax({
            //     url: 'https://corenav-linux-staging.azurewebsites.net/wp-json/wp/v2/menu',
            //     type: 'GET',
            //     data: {
            //         'lang': lang.substring(0, 2)
            //     },
            //     dataType: 'json',
            //     success: function(data) {
            //         let $content = '';
            //         data.forEach(element => {
            //             $content += '<li class=""><a href="' + element['url'] + '" class="" >' + element['title'] + "</a></li>";
            //         });
            //         $('#user-nav ul.user-nav-list').html($content);
            //         $('#user-nav-mobile ul.menu-list-mobile-items').html($content);

            //     },
            //     error: function(request, error) {
            //         console.log("Request: " + JSON.stringify(request));
            //     }
            // });




            $.ajax({
                url: 'https://corenav-linux-staging.azurewebsites.net/wp-json/wp/v2/menu',
                type: 'GET',
                data: {
                    'lang': lang.substring(0, 2)
                },
                dataType: 'json',
                localCache: true, // Required. Either a boolean, in which case localStorage will be used, or
                // an object that implements the Storage interface.

                cacheTTL: 1, // Optional. In hours. Can be used with float to indicate part of an hour, e.g. 0.5.
                cacheKey: 'mainmenu', // optional.
                isCacheValid: function() { // optional.
                    return true;
                },
                isResponseValid: function(data, status, jqXHR) { // optional.
                    return data.code === '0';
                },
                thenResponse: function(data, status, jqXHR) { // optional, only in versions 2.x.x+
                    // Alter data in whatever way you want it altered before it gets cached.
                    data.code = 101;
                    return data;
                }
            }).done(function(response) {
                // The response is available here.
                let $content = '';
                response.forEach(element => {
                    $content += '<li class=""><a href="' + element['url'] + '" class="" >' + element['title'] + "</a></li>";
                });
                $('#user-nav ul.user-nav-list').html($content);
                $('#user-nav-mobile ul.menu-list-mobile-items').html($content);
            });







        },


    }

    $.coreThemeCore = CoreThemeCore.prototype;



    $(document).ready(function() {
        // Initialize script
        new CoreThemeCore();

    });

})(jQuery);